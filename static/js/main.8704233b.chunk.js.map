{"version":3,"sources":["assets/noCover.jpg","firebase.js","SearchResults.js","LandingPage.js","languages.js","HeaderNav.js","Bookshelf.js","BookDetails.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","SearchResults","apiCall","input","noResults","axios","url","method","responseType","params","q","maxResults","startIndex","state","orderBy","then","results","bookResults","data","items","forEach","book","books","push","createBookObj","setState","catch","error","console","log","bookObj","id","title","handleMissingInfoError","volumeInfo","authors","category","categories","rating","averageRating","bookImg","handleMissingCoverImage","pageCount","publisher","language","description","publishedDate","searchInput","newSearch","handleButtonClick","bookObject","saved","bookAndCompleted","completed","dbRef","info","message","parseBookInfo","length","parsedInfo","value","index","imageLinks","thumbnail","noCover","handleLongInfo","maxLength","charAt","positionOfNextSpace","slice","search","numOfCharsToEndOfString","handleNextPage","newStartIndex","next","pageNumber","handlePreviousPage","renderInformation","className","style","src","alt","props","by","genre","to","onClick","moreDetails","add","renderNoResultMessage","renderPaginationButtons","previous","database","ref","maxStartIndexOfDisplayedResults","this","match","displayedResults","map","Component","LandingPage","tagline","href","english","symbol","placeholder","browse","myBookshelf","remove","removeBook","published","readingCompleted","finishedReading","juno","fran√ßais","HeaderNav","suggestedTitles","suggestions","updateUserInput","event","userSearch","target","newInput","userInput","handleSubmit","preventDefault","handleOnClickSubmit","handleSuggestionDropDown","getSuggestion","suggestion","renderNav","renderForm","onSubmit","e","onChange","htmlFor","autoComplete","type","name","renderSuggestion","titleSuggestion","onKeyPress","toggleLanguage","renderLanguageButtons","aria-label","Bookshelf","displayBook","key","bookImageUrl","altText","bookTitle","renderGridDisplay","buttonText","savedBooks","handleRemoveBook","renderCarousel","numOfBooks","indexOfDisplayedBook","Math","floor","displayArray","i","indexLoop","firebaseIdOfDisplayedBook","handleBookshelfNav","renderBookDisplay","toggleDisplay","gridDisplay","completedCalculation","renderNoBooksMessage","getFirebaseData","on","firebaseBookObj","val","bookArray","bookKey","eachBook","resizeWindow","windowInnerWidth","window","innerWidth","addWindowEventListener","addEventListener","getNumOfBooksToDisplayOnCarousel","bookId","child","change","newIndex","completedBook","completionPercentage","ceil","removeEventListener","off","BookDetails","renderAddRemoveButton","removed","handleAddBook","bookToDisplay","renderCheckbox","checked","handleCheckbox","renderExitButton","getDataFromFirebase","firebaseDataObj","update","Footer","App","getLanguage","basename","process","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8704233b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/noCover.fea3d7c6.jpg\";","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyA87pRApsH2HcpcixtBcOGe4gsRqyIwQ2s\",\n    authDomain: \"project-6-507f3.firebaseapp.com\",\n    projectId: \"project-6-507f3\",\n    storageBucket: \"project-6-507f3.appspot.com\",\n    messagingSenderId: \"418153390359\",\n    appId: \"1:418153390359:web:fdacdd374f5353ad9d9752\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n    export default firebase;","import { Component } from 'react';\nimport axios from 'axios';\nimport noCover from './assets/noCover.jpg';\nimport firebase from './firebase.js';\nimport { Link } from 'react-router-dom';\n\nclass SearchResults extends Component {\n  // LIFE CYCLE METHODS ------------------------------------------------------------------------------------------------------------------------ //\n  constructor() {\n    super();\n    this.noResults = false;\n    this.newSearch = '';\n    this.dbRef = firebase.database().ref();\n    this.books = [];\n    this.maxStartIndexOfDisplayedResults = 0;\n    this.state = {\n      books: [],\n      startIndex: 0,\n      next: false,\n      pageNumber: 1\n    }\n  }\n\n  /**\n   * Get new search information from component props and bind it to a component global variable\n   * Make API call based on the search information\n   */\n  componentDidMount() {\n    this.newSearch = this.props.match.params.search;\n    this.apiCall(this.props.match.params.search);\n  }\n\n  /**\n   * Check if a new search is entered; if so, clear global book array and make new API call\n   */\n  componentDidUpdate() {\n    if (this.newSearch !== this.props.match.params.search) {\n      this.newSearch = this.props.match.params.search;\n      this.books = [];\n      this.apiCall(this.newSearch);\n    }\n    // Keep track of the global book array size and only make API calls when the search index exceeds the size of the global array\n    if (this.state.next && this.state.startIndex > this.maxStartIndexOfDisplayedResults) {\n      if (this.state.startIndex > this.maxStartIndexOfDisplayedResults) {\n        this.maxStartIndexOfDisplayedResults = this.state.startIndex;\n      }\n      this.apiCall(this.newSearch);\n      this.setState({\n        next: false\n      })\n    }\n  }\n\n  // EVENT HANDLING METHODS --------------------------------------------------------------------------------------------------------------------- //\n  /**\n   * Make API call and return 12 results based on user's submitted input in the search field\n   * @param {string} input The user's submitted search input\n   */\n  apiCall = (input) => {\n    this.noResults = false;\n    axios({\n      url: 'https://www.googleapis.com/books/v1/volumes',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        q: input,\n        maxResults: 12,\n        startIndex: this.state.startIndex,\n        orderBy: 'relevance'\n      }\n    }).then((results) => {\n      const bookResults = results.data.items;\n      if (bookResults) {\n        bookResults.forEach((book) => {\n          this.books.push(this.createBookObj(book));\n        });\n      } else {\n        this.noResults = true;\n      }\n      this.setState({\n        books: this.books\n      });\n    }).catch((error) => {\n      console.log(error);\n    })\n  }\n\n  /**\n   * Cache the relevant information from the API book object\n   * @param {Object} book The book object returned from the API call\n   */\n  createBookObj = (book) => {\n    const bookObj = {};\n    bookObj.id = book.id;\n    bookObj.title = this.handleMissingInfoError(book.volumeInfo.title, 'Unknown title');\n    bookObj.authors = this.handleMissingInfoError(book.volumeInfo.authors, 'Unknown author');\n    bookObj.category = this.handleMissingInfoError(book.volumeInfo.categories, 'Unknown genre');\n    bookObj.rating = this.handleMissingInfoError(book.volumeInfo.averageRating, 'No rating');\n    bookObj.bookImg = this.handleMissingCoverImage(book.volumeInfo); // add stock no image available \n    bookObj.pageCount = this.handleMissingInfoError(book.volumeInfo.pageCount, 'Unknown page count');\n    bookObj.publisher = this.handleMissingInfoError(book.volumeInfo.publisher, 'Unknown publisher');\n    bookObj.language = this.handleMissingInfoError(book.volumeInfo.language, 'Unknown language');\n    bookObj.description = this.handleMissingInfoError(book.volumeInfo.description, 'No description');\n    bookObj.publishedDate = this.handleMissingInfoError(book.volumeInfo.publishedDate, 'Unknown published date');\n    bookObj.searchInput = this.newSearch;\n    return bookObj;\n  }\n\n  /**\n   * Push book data to Firebase\n   * @param {Object} bookObject The created book object for each of the books returned from API call\n   * @param {boolean} saved A boolean value to show whether or not a book has been saved to the bookshelf by the user\n   */\n  handleButtonClick = (bookObject, saved) => {\n    const bookAndCompleted = {\n      book: bookObject,\n      completed: false,\n      saved: saved\n    }\n    this.dbRef.push(bookAndCompleted);\n  }\n\n  /**\n   * Check if a piece of information is missing then display a customized message for it\n   * @param {Object} info An object containing the information returned by API call\n   * @param {string} message Customized error message depending on the missing information\n   */\n  handleMissingInfoError = (info, message) => {\n    let checkedInfo;\n    if (info) {\n      checkedInfo = this.parseBookInfo(info);\n    } else {\n      checkedInfo = message;\n    }\n    return checkedInfo;\n  }\n\n  /**\n   * Separate multiple pieces of information with a coma and add the word 'and' before the last one; Oxford coma convention is observed\n   * @param {Object} info An object containing the information to be parsed\n   */\n  parseBookInfo = (info) => {\n    if (typeof info === 'object') {\n      if (info.length === 1) {\n        return info;\n      } else if (info.length === 2) {\n        return `${info[0]} and ${info[1]}`;\n      } else if (info.length > 2) {\n        let parsedInfo = '';\n        info.forEach((value, index) => {\n          if (index === info.length - 1) {\n            parsedInfo += `and ${value}`;\n          } else {\n            parsedInfo += `${value}, `;\n          }\n        });\n        return parsedInfo;\n      }\n    } else {\n      return info;\n    }\n  }\n\n  /**\n   * Check if the image link exists; if not, display the no-cover image\n   * @param {Object} info An object containing the information about the cover image of a particular book\n   */\n  handleMissingCoverImage = (info) => {\n    if (info.imageLinks) {\n      return info.imageLinks.thumbnail;\n    } else {\n      return noCover;\n    }\n  }\n\n  /**\n   * Truncate long pieces of information based on specified maximum length; ellipses are placed only after complete words\n   * @param {string} info The relevant information to be checked for truncation\n   * @param {integer} maxLength The maximum number of characters allowable for a particular piece of information; if the maxLength happens in the middle of a word, the ellipsis will be placed after the next blank space, or not at all if it is the end of the string\n   */\n  handleLongInfo = (info, maxLength) => {\n    if (info.length > maxLength) {\n      if (info.charAt(maxLength - 1) !== ' ') {\n        const omittedInfo = info.slice(maxLength, info.length);\n        let positionOfNextSpace = omittedInfo.search(' ');\n        if (positionOfNextSpace < 0) {\n          const numOfCharsToEndOfString = info.length - maxLength;\n          if (numOfCharsToEndOfString < 10) {\n            positionOfNextSpace = numOfCharsToEndOfString;\n          }\n        }\n        maxLength += positionOfNextSpace;\n      }\n      info = info.slice(0, maxLength);\n      info += ' ...';\n    }\n    return info;\n  }\n\n  /**\n   * Move to the next search result page\n   */\n  handleNextPage = () => {\n    let newStartIndex = this.state.startIndex + 12;\n    this.setState({\n      startIndex: newStartIndex,\n      next: true,\n      pageNumber: this.state.pageNumber + 1\n    })\n  }\n\n  /**\n   * Move to the previous search result page\n   */\n  handlePreviousPage = () => {\n    let newStartIndex = this.state.startIndex - 12;\n    if (newStartIndex < 0) {\n      newStartIndex = 0;\n    }\n    this.setState({\n      startIndex: newStartIndex,\n      pageNumber: this.state.pageNumber - 1\n    })\n  }\n\n  // RENDER METHODS ------------------------------------------------------------------------------------------------------------------------------------ //\n  /**\n   * Render each individual book on the screen\n   * @param {Object} book The created book object based on the information returned by API call\n   */\n  renderInformation = (book) => {\n    return (\n      <div className=\"resultBox\" key={book.id} style={{\"backgroundImage\": `url(${book.bookImg})`}}>\n        <img src={book.bookImg} alt={`Book cover for ${this.handleLongInfo(book.title, 40)}`} />\n        <div className=\"descriptionContainer\">\n          <h2 className=\"title\">{this.handleLongInfo(book.title, 50)}</h2>\n          <h3>{this.props.language.by} {book.authors}</h3>\n          <h3>{this.props.language.genre} {book.category}</h3>\n          <h4>{this.props.language.rating} {book.rating}</h4>\n        </div>\n        <div className=\"buttonContainer\">\n          <Link to={`/moredetails/${book.title}`}>\n            <button onClick={() => { this.handleButtonClick(book, false) }}><i className='fas fa-info-circle'></i>  {this.props.language.moreDetails}</button>\n          </Link>\n          <button onClick={() => { this.handleButtonClick(book, true) }}><i className='fas fa-plus'></i>  {this.props.language.add}</button>\n        </div>\n      </div>\n    );\n  }\n\n  /**\n   * Render no result message if API call returns no results\n   */\n  renderNoResultMessage = () => {\n    return (\n      <h2>No Results Found :(</h2>\n    )\n  }\n\n  /**\n   * Render the previous and next page buttons\n   */\n  renderPaginationButtons = () => {\n    return(\n      <div className=\"paginationButtonContainer\">\n        <button onClick={this.handlePreviousPage}>{this.props.language.previous}</button>\n        <button onClick={this.handleNextPage}>{this.props.language.next}</button>\n      </div>\n    )\n  }\n\n  // MAIN RENDER METHOD -------------------------------------------------------------------------------------------------------------------------------- //\n  render() {\n    const displayedResults = this.state.books.slice(this.state.startIndex, this.state.startIndex + 12);\n    return (\n      <div>\n        <section className=\"searchResSection\">\n          {\n            !this.noResults\n              ? displayedResults.map((book) => this.renderInformation(book))\n              : this.renderNoResultMessage()\n          }\n        </section>\n        {\n          !this.noResults\n            ? this.renderPaginationButtons()\n            : null\n        }\n      </div>\n    )\n  }\n}\n\n\nexport default SearchResults;","import { Component } from 'react';\n\nclass LandingPage extends Component {\n  render() {\n    return (\n      <div className=\"landingPage\">\n        <h2 className=\"wrapperContainer\">{this.props.language.tagline}</h2>\n        <div className=\"iconContainer\">\n          <a href=\"#\"><i className=\"fab fa-twitter\"></i></a>\n          <a href=\"#\"><i className=\"fab fa-instagram\"></i></a>\n          <a href=\"#\"><i className=\"fab fa-linkedin\"></i></a>\n          <a href=\"#\"><i className=\"fab fa-facebook-square\"></i></a>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default LandingPage;","const english = {\n    symbol: \"en\",\n    tagline: \"Create the reading list of your dreams and track your progress!\",\n    placeholder: \"title, author, genre\",\n    browse: \"browse\",\n    myBookshelf: \"my bookshelf\",\n    remove: \"remove\",\n    removeBook: \"remove book\",\n    add: \"Add to bookshelf\",\n    by: \"By:\",\n    rating: \"Rating:\",\n    genre: \"Genre:\",\n    published: \"Publised by:\",\n    pageCount: \"Page count\",\n    language: \"Language:\",\n    completed: \"Completed\",\n    readingCompleted: \"Reading completed\",\n    finishedReading: \"Finished Reading\",\n    moreDetails: \"More details\",\n    next: \"Next\",\n    previous: \"Previous\",\n    juno: \"Juno College of Technology\"\n}\n\nconst fran√ßais = {\n    symbol: \"fr\",\n    tagline: \"Cr√©ez la biblioth√®que de vos r√™ves et suivez vos progr√®s!\",\n    placeholder: \"titre, auteur(e), genre\",\n    browse: \"rechercher\",\n    myBookshelf: \"ma biblioth√®que\",\n    remove: \"supprimer\",\n    removeBook: \"supprimer\",\n    add: \"Ajouter\",\n    by: \"Par:\",\n    rating: \"√âvaluation:\",\n    genre: \"Genre:\",\n    published: \"Publi√© par:\",\n    pageCount: \"Nombre de pages\",\n    language: \"Langue:\",\n    completed: \"Compl√™t√©\",\n    readingCompleted: \"Compl√™t√©\",\n    finishedReading: \"Termin√©\",\n    moreDetails: \"Plus de d√©tails\",\n    next: \"Page suivante\",\n    previous: \"Page pr√©c√©dente\",\n    juno: \"Juno L'√âcole de Technologie\"\n}\n\nexport { english, fran√ßais };","import { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { english, fran√ßais } from './languages';\n\nclass HeaderNav extends Component {\n  // LIFE CYCLE METHOD ------------------------------------------------------------------------------------------------------------------------- //\n  constructor() {\n    super();\n    this.newInput = false;\n    this.state = {\n      suggestions: [],\n      userInput: '',\n      language: english\n    }\n  }\n\n  /**\n   * Set class component state userInput to empty when the component first mounted\n   */\n  componentDidMount() {\n    this.setState({\n        userInput: ''\n      })\n  }\n  \n  /**\n   * Make new API call if there is a new input from the user for autosuggestions\n   */\n  componentDidUpdate() {\n    if (this.newInput) {\n      this.apiCall(this.state.userInput);\n      this.newInput = false;\n    }\n  }\n\n  // EVENT HANDLING METHODS -------------------------------------------------------------------------------------------------------------------- //\n  /**\n   * Make API calls and return 5 suggestions depending on user's input in the search field\n   * @param {string} input The user's input in the the search field\n   */\n  apiCall = (input) => {\n    axios({\n      url: 'https://www.googleapis.com/books/v1/volumes',\n      method: 'GET',\n      responseType: 'json',\n      params: {\n        q: input,\n        maxResults: 5,\n        startIndex: 0,\n        orderBy: 'relevance'\n      }\n    }).then((results) => {\n      const bookResults = results.data.items;\n      const suggestedTitles = bookResults.map((book) => {\n        return book.volumeInfo.title;\n      })\n      this.setState({\n        suggestions: suggestedTitles\n      });\n    }).catch((error) => {\n      console.log(error);\n    })\n  }\n\n  /**\n   * Check for user's new character input for autosuggestion\n   * @param {Event} event The event from onChange event listener\n   */\n  updateUserInput = (event) => {\n    const userSearch = event.target.value;\n    if (userSearch) {\n      this.newInput = true;\n    }\n    this.setState({\n      userInput: userSearch\n    })\n  }\n\n  /**\n   * Prevent the form submission event from refreshing the page\n   * @param {Event} event The form submission event\n   */\n  handleSubmit = (event) => {\n    event.preventDefault();\n  }\n\n  /**\n   * Remove user's input from state when form submits\n   */ \n  handleOnClickSubmit = () => {\n    this.setState({\n      userInput: ''\n    })\n  }\n\n  /**\n   * Remove user's input from state when a dropdown suggestion is selected\n   */\n  handleSuggestionDropDown = () => {\n    this.setState({\n      userInput: ''\n    })\n  }\n\n  /**\n   * Get the suggestions from API call depending on the user's newest input\n   * @param {Event} event The event from the onChange event listener\n   */\n  getSuggestion = (event) => {\n    const suggestion = event.target.value;\n    this.setState({\n      userInput: suggestion\n    })\n  }\n\n  /**\n   * Truncate long pieces of information based on specified maximum length; ellipses are placed only after complete words\n   * @param {string} info The relevant information to be checked for truncation\n   * @param {integer} maxLength The maximum number of characters allowable for a particular piece of information; if the maxLength happens in the middle of a word, the ellipsis will be placed after the next blank space, or not at all if it is the end of the string\n   */\n  handleLongInfo = (info, maxLength) => {\n    if (info.length > maxLength) {\n      if (info.charAt(maxLength - 1) !== ' ') {\n        const omittedInfo = info.slice(maxLength, info.length);\n        let positionOfNextSpace = omittedInfo.search(' ');\n        if (positionOfNextSpace < 0) {\n          const numOfCharsToEndOfString = info.length - maxLength;\n          if (numOfCharsToEndOfString < 10) {\n            positionOfNextSpace = numOfCharsToEndOfString;\n          }\n        }\n        maxLength += positionOfNextSpace;\n      }\n      info = info.slice(0, maxLength);\n      info += ' ...';\n    }\n    return info;\n  }\n\n  // RENDER METHODS ------------------------------------------------------------------------------------------------------------------------------ //\n  /**\n   * Render the navigation options and attach corresponding links to them\n   */\n  renderNav = () => {\n    return (\n      <nav>\n        <ul className=\"headerNav\">\n          <li><Link to=\"/\" className=\"navLinks\">{this.state.language.browse}</Link></li>\n          <li><Link to=\"/mybookshelf\" className=\"navLinks\">{this.state.language.myBookshelf}</Link></li>\n        </ul>\n      </nav>\n    )\n  }\n\n  /**\n   * Render the title and the search field\n   */\n  renderForm = () => {\n    return (\n      <div className=\"titleFormContainer\">\n        <Link to=\"/\" className=\"logo\">\n          <h1><i className=\"fas fa-book-open bookIcon\"></i><span className=\"capitalB\">B</span>ook Club Reads</h1>\n        </Link>\n        <form onSubmit={(e) => this.handleSubmit(e)} onChange={(event) => this.getSuggestion(event)}>\n          <label htmlFor=\"searchBook\" className=\"srOnly\">Search </label>\n          <input autoComplete=\"off\" type='text' id='searchbook' name='searchbook' className='searchBook' placeholder={this.state.language.placeholder} value={this.state.userInput} onChange={this.updateUserInput}></input>\n          <div className=\"suggestionContainer\">\n            {\n              this.state.userInput\n                ? this.state.suggestions.map((suggestion, index) => {\n                  return this.renderSuggestion(suggestion, index);\n                })\n                : null\n            }\n          </div>\n          <Link to={`/search/${this.state.userInput}`}>\n            <button className='searchButton' onClick={() => { this.handleOnClickSubmit() }}><i className=\"fas fa-search\"></i></button>\n          </Link>\n        </form>\n      </div>\n    )\n  }\n\n  /**\n   * Render the dropdown autosuggestion field with the information gathered from API call\n   * @param {string} titleSuggestion The title of the suggested book from API call\n   * @param {integer} index The indexed position of the suggestion in the class component state; used to set the React 'key' property for the component\n   */\n  renderSuggestion = (titleSuggestion, index) => {\n    titleSuggestion = this.handleLongInfo(titleSuggestion, 25);\n    return (\n      <div key={index} className=\"individualSuggestion\" >\n        <Link className=\"dropDownLink\" to={`/search/${titleSuggestion}`} onKeyPress={(e) => this.handleSuggestionDropDown(e)}>\n          <p onClick={(e) => this.handleSuggestionDropDown(e)} >{titleSuggestion}</p>\n        </Link>\n      </div>\n    )\n  }\n\n  // LANGUAGE MODULE ------------------------------------------------------------------------------------------------------------------------------ //\n  /**\n   * Toggle the language on display\n   * @param {Object} language The language object imported from language.js component\n   */\n  toggleLanguage = (language) => {\n    this.props.language(language)\n    this.setState({\n      language: language\n    });\n  }\n\n  /**\n   * Render the language selection buttons and attach corresponding event handlers\n   */\n  renderLanguageButtons = () => {\n    return (\n      <div className=\"languageContainer\">\n        <button aria-label=\"choose english language\" onClick={() => this.toggleLanguage(english)}>EN</button>\n\n        <button aria-label=\"choisir la langue fran√ßaise\" onClick={() => this.toggleLanguage(fran√ßais)}>FR</button>\n      </div>\n    )\n  }\n\n  // MAIN RENDER METHOD ---------------------------------------------------------------------------------------------------------------------------- //\n  render() {\n    return (\n      <header>\n        <div className=\"flexContainer container\">\n          {\n            this.renderForm()\n          }\n          {\n            this.renderNav()\n          }\n          {\n            this.renderLanguageButtons()\n          }\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default HeaderNav;","import { Component, Fragment } from 'react';\nimport firebase from './firebase.js';\nimport { Link } from 'react-router-dom';\n\nclass Bookshelf extends Component {\n  // LIFE CYCLE METHODS ----------------------------------------------------------------------------------------------------------------------------------- //\n  constructor() {\n    super();\n    this.dbRef = firebase.database().ref();\n    this.state = {\n      savedBooks: [],\n      windowInnerWidth: 900,\n      indexOfDisplayedBook: 0,\n      gridDisplay: false\n    }\n  }\n\n  /**\n   * Get data from Firebase\n   * Initialize window resize event listener and update the initial inner width of the viewport when the component first mounted\n   */\n  componentDidMount() {\n    this.getFirebaseData();\n    this.addWindowEventListener();\n    this.setState({\n      windowInnerWidth: window.innerWidth\n    })\n  }\n\n  /**\n   * Remove window resize event listener and turn of reference to Firebase when the component unmounts to prevent memory leakage\n   */\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.resizeWindow);\n    this.dbRef.off();\n  }\n\n  // RENDER METHODS ------------------------------------------------------------------------------------------------------------------------------------------ //\n  /**\n   * Render individual books on the carousel display\n   * @param {string} key The React key for the rendered componet; Firebase ID of the book to be displayed is used to set React key\n   * @param {string} className The class name of the book; 'displayed' for the main displayed book; 'shelved' for the adjacent books\n   * @param {string} bookImageUrl The source of the book cover image\n   * @param {string} altText The alt-Text for the book cover image\n   * @param {string} bookTitle The title of the main displayed book to create the link to its detail page\n   */\n  displayBook = (key, className, bookImageUrl, altText, bookTitle) => {\n    return (\n      <div key={key} className={className}>\n        {\n          className === 'displayedBook'\n            ? <Link to={`/mybookshelf/${bookTitle}`}>\n              <img src={bookImageUrl} alt={altText} />\n            </Link>\n            : <img src={bookImageUrl} alt={altText} />\n        }\n      </div>\n    )\n  }\n\n  /**\n   * Render the grid display for the bookshelf\n   */\n  renderGridDisplay = () => {\n    const buttonText = this.props.language.remove;\n    return (\n      <section className=\"gridDisplay\">\n        <div className=\"bookShelfDisplay\">\n          {\n            this.state.savedBooks.map((book) => {\n              const bookImageUrl = book[0].bookImg;\n              const altText = `Book cover for ${book[0].title}`;\n              const key = book[2];\n              const bookTitle = book[0].title;\n\n              return (\n                <div key={key} className=\"displayedBook\">\n                  <Link to={`/mybookshelf/${bookTitle}`}>\n                    <img src={bookImageUrl} alt={altText} />\n                  </Link>\n                  <button onClick={() => this.handleRemoveBook(key)} className='removeBook'>{buttonText}</button>\n                </div>\n              )\n            })\n          }\n        </div>\n      </section>\n    )\n  }\n\n  /**\n   * Render the carousel display for the bookshelf\n   * @param {integer} numOfBooks The number of books to be displayed on the carousel\n   */\n  renderCarousel = (numOfBooks) => {\n    // Check if the number of books to display exceeds the number of saved books; if so, then set the number of books to display to equal the number of saved books\n    if (numOfBooks > this.state.savedBooks.length) {\n      numOfBooks = this.state.savedBooks.length;\n    }\n    // If the number of books to display is even, make it odd by take 1 away so the carousel display is balanced\n    if (numOfBooks % 2 === 0) {\n      numOfBooks -= 1;\n    }\n    // Set the start index of the books on the carousel display\n    let startIndex = this.state.indexOfDisplayedBook - Math.floor(numOfBooks / 2);\n    // Push the books to display into the displayArray\n    let displayArray = [];\n    for (let i = 0; i < numOfBooks; i++) {\n      startIndex = this.indexLoop(startIndex);\n      displayArray.push(this.state.savedBooks[startIndex]);\n      startIndex++;\n    }\n    // Find the firebase ID of the displayed book; to be passed as a parameter into the handleRemoveBook function\n    const firebaseIdOfDisplayedBook = this.state.savedBooks[this.state.indexOfDisplayedBook][2];\n    const buttonText = this.props.language.remove;\n    return (\n      <section className=\"carousel\">\n        <div className=\"bookShelfDisplay\">\n          <button className=\"chevronButton\" aria-label=\"display next books in bookshelf\"><i className=\"fas fa-chevron-left\" onClick={() => this.handleBookshelfNav(-1)}></i></button>\n          {\n            displayArray.map((book, index) => {\n              let className = '';\n              if (index === Math.floor(numOfBooks / 2)) {\n                className = 'displayedBook';\n              } else {\n                className = 'shelvedBooks';\n              }\n              const bookImageUrl = book[0].bookImg;\n              const altText = `Book cover for ${book[0].title}`;\n              const key = book[2];\n              const bookTitle = book[0].title;\n              return this.displayBook(key, className, bookImageUrl, altText, bookTitle);\n            })\n          }\n          <button className=\"chevronButton\" aria-label=\"display previous books in bookshelf\"><i className=\"fas fa-chevron-right\" onClick={() => this.handleBookshelfNav(1)}></i></button>\n        </div>\n        <button onClick={() => this.handleRemoveBook(firebaseIdOfDisplayedBook)} className='removeBook'>{buttonText}</button>\n      </section>\n    )\n  }\n\n  /**\n   * Render all books, display toggle button, and completion percentage on the screen\n   * @param {integer} numOfBooks The number of books to be displayed on the carousel\n   */\n  renderBookDisplay = (numOfBooks) => {\n    return (\n      <Fragment>\n        <div className=\"dashboardContainer\">\n          <button className=\"gridDisplayButton\" onClick={() => this.toggleDisplay()}>\n            {\n              this.state.gridDisplay\n                ? <i className=\"fas fa-grip-horizontal\"></i>\n                : <i className=\"fas fa-sort\"></i>\n            }   \n          </button>\n          <h3>{`${this.completedCalculation()}% ${this.props.language.readingCompleted}!`}</h3>\n        </div>\n        {\n          this.state.gridDisplay\n            ? this.renderGridDisplay()\n            : this.renderCarousel(numOfBooks)\n        }\n      </Fragment>\n    )\n  }\n\n  /**\n   * Render the message when there are no saved books\n   */\n  renderNoBooksMessage = () => {\n    return (\n      <h2 className=\"bookshelfEmptyMessage\">No saved books yet!</h2>\n    )\n  }\n\n  // EVENT HANDLING METHODS --------------------------------------------------------------------------------------------------------------------------------- //\n  /**\n   * Get saved books data from Firebase and update the class component state \n   */\n  getFirebaseData = () => {\n    this.dbRef.on('value', (data) => {\n      const firebaseBookObj = data.val();\n      const bookArray = [];\n      for (let bookKey in firebaseBookObj) {\n        const eachBook = firebaseBookObj[bookKey].book;\n        const finishedReading = firebaseBookObj[bookKey].completed;\n        const saved = firebaseBookObj[bookKey].saved;\n        if (saved) {\n          bookArray.push([eachBook, finishedReading, bookKey]);\n        }\n      }\n      this.setState({\n        savedBooks: bookArray\n      })\n    });\n  }\n\n  /**\n   * Update the class component state 'windowInnerWidth' when the window size changes\n   */\n  resizeWindow = () => {\n    this.setState({\n      windowInnerWidth: window.innerWidth\n    })\n  }\n\n  /**\n   * Handle window resize event\n   */\n  addWindowEventListener = () => {\n    this.resizeWindow();\n    window.addEventListener('resize', this.resizeWindow);\n  }\n\n  /**\n   * Determine the number of books to display on the carousel depending on the inner width of the viewport\n   */\n  getNumOfBooksToDisplayOnCarousel = () => {\n    if (this.state.windowInnerWidth > 1250) {\n      return 9;\n    } else if (this.state.windowInnerWidth > 900) {\n      return 5;\n    } else if (this.state.windowInnerWidth > 800) {\n      return 3;\n    } else {\n      return 1;\n    }\n  }\n\n  /**\n   * Remove a book from Firebase and update the class component state\n   * @param {string} bookId The Firebase ID of the book to be removed\n   */\n  handleRemoveBook = (bookId) => {\n    this.dbRef.child(bookId).remove();\n    // Error handling when the index of displayed book is greater than the max index of saveBooks array\n    if (this.state.indexOfDisplayedBook >= this.state.savedBooks.length - 1) {\n      this.setState({\n        indexOfDisplayedBook: this.state.indexOfDisplayedBook - 1\n      })\n    }\n  }\n\n  /**\n   * Handle carousel book display navigation\n   * @param {integer} change Increment / Decrement of the index of the displayed book; +1 if next book button is clicked; -1 if previous book button is clicked\n   */\n  handleBookshelfNav = (change) => {\n    let newIndex = this.state.indexOfDisplayedBook + change;\n    newIndex = this.indexLoop(newIndex);\n    this.setState({\n      indexOfDisplayedBook: newIndex\n    })\n  }\n\n  /**\n   * Create the infinite index loop for the carousel book display\n   * @param {integer} index The index of the main displayed book\n   */\n  indexLoop = (index) => {\n    if (index < 0) {\n      // if the index is less than 0, then set it to max index minus the value of the index itself; '+' is used in the code because index is negative  \n      index = this.state.savedBooks.length + index;\n    } else if (index > this.state.savedBooks.length - 1) {\n      // if the index is more than max index, then set it to be the difference between itself and the length of the array\n      index = index - this.state.savedBooks.length;\n    }\n    return index;\n  }\n\n  /**\n   * Calculate the percentage of completed books against entire book collection\n   */\n  completedCalculation = () => {\n    let completedBook = 0;\n    this.state.savedBooks.forEach((book) => {\n      if (\n        book[1]\n      ) { completedBook++ }\n    })\n    let completionPercentage = (completedBook * 100) / this.state.savedBooks.length;\n    completionPercentage = Math.ceil(completionPercentage);\n    return completionPercentage;\n  }\n\n  /**\n   * Toggle between grid and carousel display\n   */\n  toggleDisplay = () => {\n    this.setState({\n      gridDisplay: !this.state.gridDisplay\n    })\n  }\n  \n  // MAIN RENDER METHOD ------------------------------------------------------------------------------------------------------------------------------------- //\n  render() {\n    let className;\n    this.state.gridDisplay ? className = 'gridBookshelf' : className = \"carouselBookshelf\";\n    return (\n      <div className={className}>\n        {\n          this.state.savedBooks.length\n            ? this.renderBookDisplay(this.getNumOfBooksToDisplayOnCarousel())\n            : this.renderNoBooksMessage()\n        }\n      </div>\n    )\n  }\n}\n\nexport default Bookshelf;","import { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport firebase from 'firebase';\n\nclass BookDetails extends Component {\n  // LIFE CYCLE METHODS -------------------------------------------------------------------------------------------------------------------------- //\n  constructor() {\n    super();\n    this.dbRef = firebase.database().ref();\n    this.state = {\n      bookToDisplay: {},\n      firebaseIdOfDisplayedBook: '',\n      removed: false,\n      completed: false,\n      saved: false\n    }\n  }\n\n  /**\n   * Get data from Firebase when the component mounted\n   */\n  componentDidMount() {\n    this.getDataFromFirebase();\n  }\n\n  /**\n   * Update Firbase to match the current class component state\n   */\n  componentDidUpdate() {\n    this.dbRef.child(this.state.firebaseIdOfDisplayedBook).update({ completed: this.state.completed });\n  }\n\n  /**\n   * Turn off reference to Firebase to prevent memory leakage\n   */\n  componentWillUnmount() {\n    this.dbRef.off();\n  }\n\n  // RENDER METHODS -------------------------------------------------------------------------------------------------------------------------------- //\n  /**\n   * Render the add-to-bookshelf / remove-book button with corresponding event handler methods for onClick event\n   */\n  renderAddRemoveButton = () => {\n    return (\n      this.state.removed || !this.state.saved\n\n        ? <button onClick={() => this.handleAddBook(this.state.bookToDisplay)} className='addBook'>{this.props.language.add}</button>\n\n        : <button onClick={() => this.handleRemoveBook(this.state.firebaseIdOfDisplayedBook)} className='removeBook'>{this.props.language.removeBook}</button>\n    )\n  }\n\n  /**\n   * Render the completion checkbox with 'handleCheckbox' method for onChange event\n   */\n  renderCheckbox = () => {\n    return (\n      this.state.saved\n        ? <div className=\"checkbox\">\n          <input checked={this.state.completed} onChange={() => this.handleCheckbox()} type=\"checkbox\" name=\"completed\" id=\"completed\" />\n          <label htmlFor=\"completed\">{this.props.language.finishedReading}</label>\n        </div>\n        : null\n    )\n  }\n\n  /**\n   * Render the exit button and attach the corresponding event handlers depending on whether the user has saved the book\n   * If the user has saved the book, link will take them to bookshelf; otherwise, link will take them back to the same search result page they were on\n   */\n  renderExitButton = () => {\n    return (\n      this.state.saved\n        ? <Link to=\"/mybookshelf\">\n          <button className=\"exitButton\" aria-label=\"return to previous screen\"><i className=\"fas fa-times-circle\"></i></button>\n        </Link>\n        : <Link to={`/search/${this.state.bookToDisplay.searchInput}`}>\n          <button className=\"exitButton\" aria-label=\"return to previous screen\"><i className=\"fas fa-times-circle\"></i></button>\n        </Link>\n    )\n  }\n\n  // EVENT HANDLING METHODS ------------------------------------------------------------------------------------------------------------------------ //\n  /**\n   * Get Date from firebase and save to states; check if the user has added a book to the bookshelf; if not, remove the temp book info from firebase\n   */\n  getDataFromFirebase = () => {\n    this.dbRef.on('value', (data) => {\n      const firebaseDataObj = data.val();\n      for (let key in firebaseDataObj) {\n        if (firebaseDataObj[key].book) {\n          const bookTitle = firebaseDataObj[key].book.title;\n          if (bookTitle === this.props.match.params.book) {\n            const bookObj = firebaseDataObj[key].book;\n            this.setState({\n              bookToDisplay: bookObj,\n              firebaseIdOfDisplayedBook: key,\n              completed: firebaseDataObj[key].completed,\n              saved: firebaseDataObj[key].saved\n            })\n          }\n        } else {\n          this.dbRef.child(key).remove();\n        }\n        if (!firebaseDataObj[key].saved) {\n          this.dbRef.child(key).remove();\n        }\n      }\n    });\n  }\n\n  /**\n   * Remove book from Firebase and update class component state\n   * @param {string} bookId The Firebase ID of the book to be removed \n   */\n  handleRemoveBook = (bookId) => {\n    this.dbRef.child(bookId).remove();\n    this.setState({\n      removed: true,\n      saved: false\n    })\n  }\n\n  /**\n   * Add book to Firebase and update the class component state\n   * @param {Object} bookObject The Object from Google Books API call that contains the information of the book to display\n   */\n\n  handleAddBook = (bookObject) => {\n    const bookAndCompleted = {\n      book: bookObject,\n      completed: false,\n      saved: true\n    }\n    this.dbRef.push(bookAndCompleted);\n    this.setState({\n      removed: false\n    })\n  }\n\n  /**\n   * Toggle the state 'completed' depending on whether the user has checked the checkbox\n   */\n  handleCheckbox = () => {\n    this.setState({\n      completed: !this.state.completed\n    })\n  }\n\n  // MAIN RENDER METHOD ----------------------------------------------------------------------------------------------------------------------------- //\n  render() {\n    // Get the information for the book to display from state\n    const book = this.state.bookToDisplay;\n    return (\n      <div className=\"detailsFlexContainer container\">\n        {\n          this.renderExitButton()\n        }\n        <figure className=\"imageContainer\">\n          <img src={book.bookImg} alt={`Book cover for ${book.title}`} />\n        </figure>\n        <div className=\"description\">\n          <h2 className=\"bold\">{book.title}</h2>\n\n          <h3>{this.props.language.by} <span>{book.authors}</span>  | {this.props.language.genre} <span>{book.category}</span></h3>\n\n          <h4><i className=\"fas fa-star\"></i> : <span>{book.rating}</span></h4>\n\n          <h4>{this.props.language.published} <span>{book.publisher}</span> - <span>{book.publishedDate}</span></h4>\n\n          <h4 className=\"lastRow \">{this.props.language.pageCount}:<span>{book.pageCount}</span> | {this.props.language.language} <span>{book.language}</span></h4>\n\n          <h4><span>{book.description}</span></h4>\n        </div>\n        {\n          this.renderAddRemoveButton()\n        }\n        {\n          this.renderCheckbox()\n        }\n      </div>\n    );\n  }\n}\n\nexport default BookDetails;","import { Component } from 'react';\n\nclass Footer extends Component {\n    render() {\n        return(\n            <footer>\n                <p className=\"container\"><a href=\"www.junocollege.com\">{this.props.language.juno} &copy;2020</a></p>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import './App.css';\nimport { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport SearchResults from './SearchResults';\nimport LandingPage from './LandingPage';\nimport HeaderNav from './HeaderNav';\nimport Bookshelf from './Bookshelf';\nimport BookDetails from './BookDetails';\nimport Footer from './Footer';\nimport { english } from './languages';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      language: english\n    }\n  }\n\n  getLanguage = (language) => {\n    this.setState({\n      language: language\n    })\n  }\n\n  render() {\n    return (\n      <Router basename={process.env.PUBLIC_URL}>\n        <div className=\"App\">\n          <HeaderNav language={(language) => this.getLanguage(language)}/>\n          <Route exact path=\"/\" render={() => {\n            return(\n              <LandingPage language={this.state.language}/>\n            )\n          }}/>\n          <Route path=\"/search/:search\" render={(props) => {\n            return(\n              <SearchResults {...props} language={this.state.language}/>\n            )\n          }}/>\n          <Route exact path=\"/mybookshelf\" render={() => {\n            return(\n              <Bookshelf language={this.state.language} />\n            )\n          }}/>\n          <Route path=\"/mybookshelf/:book\" render={(props) => {\n            return(\n              <BookDetails {...props} language={this.state.language}/>\n            )\n          }} />\n          <Route path=\"/moredetails/:book\" render={(props) => {\n            return(\n              <BookDetails {...props} language={this.state.language} />\n            )\n          }}/>\n          <Footer language={this.state.language}/>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}